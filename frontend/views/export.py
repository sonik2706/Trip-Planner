import streamlit as st
import json
import pandas as pd
from datetime import datetime
from typing import Dict
from frontend.models.travel_request import TravelRequest

def create_export_options(results: Dict, request: TravelRequest):
    """Create export and sharing options"""
    st.subheader("📤 Export & Share")

    col1, col2, col3 = st.columns(3)

    with col1:
        # JSON export
        json_data = json.dumps(results, indent=2, ensure_ascii=False)
        st.download_button(
            label="📄 Download JSON",
            data=json_data,
            file_name=f"travel_plan_{request.city}_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
            mime="application/json",
            use_container_width=True,
        )

    with col2:
        # CSV export for hotels
        if results.get("hotels", {}).get("hotels"):
            hotels_df = pd.DataFrame(results["hotels"]["hotels"])
            csv_data = hotels_df.to_csv(index=False)
            st.download_button(
                label="🏨 Hotels CSV",
                data=csv_data,
                file_name=f"hotels_{request.city}_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv",
                use_container_width=True,
            )

    with col3:
        # Text summary export
        summary_text = create_text_summary(results, request)
        st.download_button(
            label="📝 Text Summary",
            data=summary_text,
            file_name=f"travel_summary_{request.city}_{datetime.now().strftime('%Y%m%d')}.txt",
            mime="text/plain",
            use_container_width=True,
        )

    # Sharing options
    st.markdown("### 🔗 Quick Actions")
    sharing_col1, sharing_col2, sharing_col3 = st.columns(3)

    with sharing_col1:
        if st.button("📧 Email Plan", use_container_width=True):
            st.info(
                "💡 **Email Integration**: You can copy the text summary above and email it, or integrate with your email service."
            )

    with sharing_col2:
        if st.button("📱 Mobile Share", use_container_width=True):
            st.info(
                "💡 **Mobile Sharing**: Access this page on mobile to share via your preferred messaging app."
            )

    with sharing_col3:
        if st.button("🔄 Plan Again", use_container_width=True):
            st.session_state.travel_results = None
            st.session_state.planning_stage = "input"
            st.rerun()


def create_text_summary(results: Dict, request: TravelRequest) -> str:
    """Create a text summary of the travel plan"""
    lines = []
    lines.append(f"✈️ TRAVEL PLAN FOR {request.city.upper()}")
    lines.append("=" * 50)
    lines.append("")

    # Basic info
    lines.append("📋 TRIP DETAILS")
    lines.append(f"Destination: {request.city}, {request.country}")
    lines.append(f"Dates: {request.checkin_date} to {request.checkout_date}")
    lines.append(f"Duration: {request.trip_days} days")
    lines.append(f"Travelers: {request.adults} adult(s), {request.rooms} room(s)")
    lines.append("")

    # Attractions
    attractions = results.get("attractions", {}).get("attractions", [])
    if attractions:
        lines.append("🎯 TOP ATTRACTIONS")
        for i, attr in enumerate(attractions[:10], 1):
            lines.append(f"{i}. {attr.get('name', 'Unknown')}")
            if attr.get("description"):
                lines.append(f"   {attr['description'][:100]}...")
        lines.append("")

    # Hotels
    hotels = results.get("hotels", {}).get("hotels", [])
    if hotels:
        lines.append("🏨 RECOMMENDED HOTELS")
        for i, hotel in enumerate(hotels[:5], 1):
            lines.append(f"{i}. {hotel.get('name', 'Unknown')}")
            lines.append(
                f"   Price: {hotel.get('price', 'N/A')} {hotel.get('currency', request.currency)}/night"
            )
            lines.append(
                f"   Rating: {hotel.get('review_score', 'N/A')}/10 ({hotel.get('review_count', 0)} reviews)"
            )
            lines.append(
                f"   Distance to attractions: {hotel.get('distance_to_attractions', 'N/A')}km"
            )
        lines.append("")

    # Itinerary
    itinerary = results.get("itinerary", {}).get("itinerary", {})
    if itinerary:
        lines.append("🗓️ DAILY ITINERARY")
        for day, activities in itinerary.items():
            lines.append(f"{day}:")
            if isinstance(activities, list):
                for activity in activities:
                    lines.append(f"  • {activity}")
            else:
                lines.append(f"  • {activities}")
        lines.append("")

    # Footer
    lines.append("Generated by AI Travel Planner")
    lines.append(f"Created: {datetime.now().strftime('%Y-%m-%d %H:%M')}")

    return "\n".join(lines)